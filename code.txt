#include <Arduino.h>
#include <MQTT.h>
#include "WiFi.h"
#include <SPI.h>

#define IMUnum 14
#define data_num ((IMUnum*9) + 2)

union
{
    int16_t integer[data_num];
    unsigned char byte[(data_num*2)]; 
} payload;

long timeStamp = 0;

const char *ssid = "SSID";    
const char *password = "PASSWORD";    

const char *mqtt_server = "MQTT SERVER IP";

WiFiClient espClient1;
MQTTClient client(400);


void initMPU9250(int csPin);
void writeRegister(uint8_t subAddress, uint8_t data, int csPin);
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest, int csPin);
void initAK8963(int csPin);
void readAcc(int csPin);
void readGyr(int csPin);
void readMag(int csPin);
void reconnect();


#define ACCEL_OUT 0x3B
#define GYRO_OUT 0x43
#define EXT_SENS_DATA_00 0x49
#define ACCEL_CONFIG 0x1C
// #define ACCEL_FS_SEL_2G 0x00
#define ACCEL_FS_SEL_4G 0x08
// #define ACCEL_FS_SEL_8G 0x10
// #define ACCEL_FS_SEL_16G 0x18
#define GYRO_CONFIG 0x1B
// #define GYRO_FS_SEL_250DPS 0x00
#define GYRO_FS_SEL_500DPS 0x08
// #define GYRO_FS_SEL_1000DPS 0x10
// #define GYRO_FS_SEL_2000DPS 0x18
#define ACCEL_CONFIG2 0x1D
#define ACCEL_DLPF_184 0x01
// #define ACCEL_DLPF_92 0x02
// #define ACCEL_DLPF_41 0x03
// #define ACCEL_DLPF_20 0x04
// #define ACCEL_DLPF_10 0x05
// #define ACCEL_DLPF_5 0x06
#define CONFIG 0x1A
#define GYRO_DLPF_184 0x01
// #define GYRO_DLPF_92 0x02
// #define GYRO_DLPF_41 0x03
// #define GYRO_DLPF_20 0x04
// #define GYRO_DLPF_10 0x05
// #define GYRO_DLPF_5 0x06
#define SMPDIV 0x19
#define INT_PIN_CFG 0x37
#define INT_ENABLE 0x38
#define PWR_MGMNT_1 0x6B
#define USER_CTRL 0x6A
#define I2C_MST_CTRL 0x24
#define I2C_SLV0_ADDR 0x25
#define I2C_SLV0_REG 0x26
#define I2C_SLV0_DO 0x63
#define I2C_SLV0_CTRL 0x27
#define AK8963_ADDRESS 0x0C
#define AK8963_HXL 0x03
#define AK8963_CNTL1 0x0A
#define AK8963_CNTL2 0x0B
#define AK8963_ASA 0x10

#define SPI_READ 0x80
#define SPI_LS_CLOCK 1000000 // 1 MHz

// raw data
int16_t accX_Raw,accY_Raw,accZ_Raw;
int16_t gyrX_Raw,gyrY_Raw,gyrZ_Raw;
int16_t magX_Raw,magY_Raw,magZ_Raw;

// scale factors to convert raw data
float aRes = 4.0f/32768.0f;
float gRes = 500.0/32768.0;
float mRes = 10.*4912./32760.0;

long actMicros = 0, lastMicros = 0;

// const int16_t tX[3] = {0,  1,  0}; 
// const int16_t tY[3] = {1,  0,  0};
// const int16_t tZ[3] = {0,  0, -1};

// chip select pins
#define CS1 5
#define CS2 16
#define CS3 4
#define CS4 17
#define CS5 21
#define CS6 22
#define CS7 25
#define CS8 26
#define CS9 32
#define CS10 33
#define CS11 13
#define CS12 27 
#define CS13 14
#define CS14 15

uint8_t CS_pins[14] = {CS1,CS2,CS3,CS4,CS5,CS6,CS7,CS8,CS9,CS10,CS11,CS12,CS13,CS14};

void setup() {
Serial.begin(115200);
while(!Serial) {Serial.print("."); delay(100);}

WiFi.begin(ssid, password,1);
while (WiFi.status() != WL_CONNECTED) {
  delay(100);
  Serial.print(".");
}
Serial.println("Connected to the network");
Serial.println(WiFi.localIP());
delay(50);

client.begin(mqtt_server, 1883, espClient1);
delay(50);

SPI.begin();
SPI.beginTransaction(SPISettings(SPI_LS_CLOCK, MSBFIRST, SPI_MODE3));
delay(50);

Serial.println("Started to initialize...");

for(int i=0; i<IMUnum; i++){
    pinMode(CS_pins[i],OUTPUT);
    digitalWrite(CS_pins[i],HIGH);
}
delay(20);

for(int i=0; i<IMUnum; i++){
  initMPU9250(CS_pins[i]);
  delay(5);
  initAK8963(CS_pins[i]);
  delay(5);
  writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_4G,CS_pins[i]);
  writeRegister(GYRO_CONFIG,GYRO_FS_SEL_500DPS,CS_pins[i]);
  delay(5);
  writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_184,CS_pins[i]);
  writeRegister(CONFIG,GYRO_DLPF_184,CS_pins[i]);
  delay(5);
  writeRegister(SMPDIV,4,CS_pins[i]);
  delay(5);
  Serial.print(i); Serial.println(". IMU init done");
}
  Serial.println("Done");
  delay(500);
}

void loop() {
  client.loop();
  if (!client.connected()) {
    reconnect();
  }

  timeStamp = millis();
  
  if (micros() - lastMicros > 50000){ //50000us=50ms=20Hz
    lastMicros = micros();

    for(int i=0; i<IMUnum;i++){
      readAcc(CS_pins[i]);
      readGyr(CS_pins[i]);
      readMag(CS_pins[i]);

      payload.integer[(9*i)] = accX_Raw;
      payload.integer[(9*i)+1] = accY_Raw;
      payload.integer[(9*i)+2] = accZ_Raw;

      payload.integer[(9*i)+3] = gyrX_Raw;
      payload.integer[(9*i)+4] = gyrY_Raw;
      payload.integer[(9*i)+5] = gyrZ_Raw;

      payload.integer[(9*i)+6] = magX_Raw;
      payload.integer[(9*i)+7] = magY_Raw;
      payload.integer[(9*i)+8] = magZ_Raw;
    }
    payload.integer[136] = timeStamp >> 16;
    payload.integer[135] = 0xFFFF && timeStamp;
    payload.byte[252] = 0xFF & (timeStamp >> 24);
    payload.byte[253] = 0xFF & (timeStamp >> 16);
    payload.byte[254] = 0xFF & (timeStamp >> 8);
    payload.byte[255] = 0xFF & timeStamp;

    client.publish("data", (char *) payload.byte, (sizeof(payload.byte)) );
  }
}

void initMPU9250(int csPin){
  writeRegister(PWR_MGMNT_1, 0x00, csPin); // Clear sleep mode bit (6), enable all sensors 
  delay(50); // Wait for all registers to reset 
  writeRegister(PWR_MGMNT_1, 0x01, csPin);  // Auto select clock source to be PLL gyroscope reference if ready else
  delay(50); 
  writeRegister(CONFIG, 0x03, csPin);  
  writeRegister(SMPDIV, 0x04, csPin);  // Use a 200 Hz rate; a rate consistent with the filter update rate 
  writeRegister(GYRO_CONFIG, GYRO_FS_SEL_500DPS, csPin ); // Write new GYRO_CONFIG value to register
  writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_4G, csPin); // Write new ACCEL_CONFIG register value
  writeRegister(ACCEL_CONFIG2, ACCEL_DLPF_184, csPin); // Write new ACCEL_CONFIG2 register value

  writeRegister(INT_PIN_CFG, 0x10, csPin);  // INT is 50 microsecond pulse and any read to clear  
  writeRegister(INT_ENABLE, 0x01, csPin);   // Enable data ready (bit 0) interrupt
  delay(50);

  writeRegister(USER_CTRL, 0x20, csPin);          // Enable I2C Master mode  
  writeRegister(I2C_MST_CTRL, 0x1D, csPin);       // I2C configuration STOP after each transaction, master I2C bus at 400 KHz
  writeRegister(0x67, 0x81, csPin); // Use blocking data retreival and enable delay for mag sample rate mismatch
  writeRegister(0x34, 0x01, csPin); // Delay mag data retrieval to once every other accel/gyro data sample
  delay(50);
}

void initAK8963(int csPin)
{
  writeRegister(I2C_SLV0_ADDR, AK8963_ADDRESS, csPin);           // Set the I2C slave address of AK8963 and set for write.
  writeRegister(I2C_SLV0_REG, AK8963_CNTL2, csPin);              // I2C slave 0 register address from where to begin data transfer
  writeRegister(I2C_SLV0_DO, 0x01, csPin);                       // Reset AK8963
  writeRegister(I2C_SLV0_CTRL, 0x81, csPin);                     // Enable I2C and write 1 byte
  delay(50);
  writeRegister(I2C_SLV0_ADDR, AK8963_ADDRESS, csPin);           // Set the I2C slave address of AK8963 and set for write.
  writeRegister(I2C_SLV0_REG, AK8963_CNTL1, csPin  );               // I2C slave 0 register address from where to begin data transfer
  writeRegister(I2C_SLV0_DO, 0x00, csPin);                       // Power down magnetometer  
  writeRegister(I2C_SLV0_CTRL, 0x81, csPin);                     // Enable I2C and write 1 byte
  delay(50);
  writeRegister(I2C_SLV0_ADDR, AK8963_ADDRESS, csPin);           // Set the I2C slave address of AK8963 and set for write.
  writeRegister(I2C_SLV0_REG, AK8963_CNTL1 , csPin );               // I2C slave 0 register address from where to begin data transfer
  writeRegister(I2C_SLV0_DO, 0x0F, csPin);                       // Enter fuze mode
  writeRegister(I2C_SLV0_CTRL, 0x81, csPin);                     // Enable I2C and write 1 byte
  delay(50);
  
  writeRegister(I2C_SLV0_ADDR, AK8963_ADDRESS | 0x80, csPin);    // Set the I2C slave address of AK8963 and set for read.
  writeRegister(I2C_SLV0_REG, AK8963_ASA, csPin);               // I2C slave 0 register address from where to begin data transfer
  writeRegister(I2C_SLV0_CTRL, 0x83, csPin);                     // Enable I2C and read 3 bytes
  delay(50);
  
  writeRegister(I2C_SLV0_ADDR, AK8963_ADDRESS, csPin);           // Set the I2C slave address of AK8963 and set for write.
  writeRegister(I2C_SLV0_REG, AK8963_CNTL1, csPin  );               // I2C slave 0 register address from where to begin data transfer
  writeRegister(I2C_SLV0_DO, 0x00, csPin);                       // Power down magnetometer  
  writeRegister(I2C_SLV0_CTRL, 0x81, csPin);                     // Enable I2C and transfer 1 byte
  delay(50);

  writeRegister(I2C_SLV0_ADDR, AK8963_ADDRESS, csPin);           // Set the I2C slave address of AK8963 and set for write.
  writeRegister(I2C_SLV0_REG, AK8963_CNTL1 , csPin );               // I2C slave 0 register address from where to begin data transfer 

  writeRegister(I2C_SLV0_DO, 1 << 4 | 0x06, csPin);        // Set magnetometer data resolution and sample ODR
  writeRegister(I2C_SLV0_CTRL, 0x81, csPin);                     // Enable I2C and transfer 1 byte
  delay(50);
}

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data, int csPin){
  digitalWrite(csPin,LOW); // select the MPU9250 chip
  SPI.transfer(subAddress); // write the register address
  SPI.transfer(data); // write the data
  digitalWrite(csPin,HIGH); // deselect the MPU9250 chip
  delayMicroseconds(10);
}

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest, int csPin){
  digitalWrite(csPin,LOW); // select the MPU9250 chip
  SPI.transfer(subAddress | SPI_READ); // specify the starting register address
  for(uint8_t i = 0; i < count; i++){
    dest[i] = SPI.transfer(0x00); // read the data
  }
  digitalWrite(csPin,HIGH); // deselect the MPU9250 chip
  delayMicroseconds(10);
}

void readAcc(int csPin) {
  uint8_t rawDataA[6];  // x/y/z accel register data stored here
  readRegisters(ACCEL_OUT, 6, rawDataA, csPin);  // Read the six raw data registers into data array
  accX_Raw = ((int16_t)rawDataA[0] << 8) | rawDataA[1] ;  // Turn the MSB and LSB into a signed 16-bit value
  accY_Raw = ((int16_t)rawDataA[2] << 8) | rawDataA[3] ;  
  accZ_Raw = ((int16_t)rawDataA[4] << 8) | rawDataA[5] ;
  delayMicroseconds(10); 
}

void readGyr(int csPin) {
  uint8_t rawDataG[6];  // x/y/z gyro register data stored here
  readRegisters(GYRO_OUT, 6, rawDataG, csPin);  // Read the six raw data registers sequentially into data array
  gyrX_Raw = ((int16_t)rawDataG[0] << 8) | rawDataG[1] ;  // Turn the MSB and LSB into a signed 16-bit value
  gyrY_Raw = ((int16_t)rawDataG[2] << 8) | rawDataG[3] ;  
  gyrZ_Raw = ((int16_t)rawDataG[4] << 8) | rawDataG[5] ;
  delayMicroseconds(10); 
}


void readMag(int csPin)
{
  uint8_t rawDataM[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
  //  readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
   writeRegister(I2C_SLV0_ADDR, AK8963_ADDRESS | 0x80, csPin);    // Set the I2C slave address of AK8963 and set for read.
   writeRegister(I2C_SLV0_REG, 0x03, csPin);             // I2C slave 0 register address from where to begin data transfer
   writeRegister(I2C_SLV0_CTRL, 0x87, csPin);                     // Enable I2C and read 7 bytes
   delayMicroseconds(10);
   readRegisters(EXT_SENS_DATA_00, 7, rawDataM, csPin);        // Read the x-, y-, and z-axis calibration values
   uint8_t c = rawDataM[6]; // End data read by reading ST2 register
   if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
    magX_Raw = ((int16_t)rawDataM[1] << 8) | rawDataM[0] ;  // Turn the MSB and LSB into a signed 16-bit value
    magY_Raw = ((int16_t)rawDataM[3] << 8) | rawDataM[2] ;  // Data stored as little Endian
    magZ_Raw = ((int16_t)rawDataM[5] << 8) | rawDataM[4] ; 
   }
   delayMicroseconds(10);
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP32Client")) {
      Serial.println("connected");
    } else {
      delay(2000);
    }
  }
}
